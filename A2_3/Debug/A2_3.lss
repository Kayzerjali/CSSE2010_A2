
A2_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c28  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d8  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028b  00000000  00000000  0000251a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_20>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e7       	ldi	r30, 0x70	; 112
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 31       	cpi	r26, 0x1A	; 26
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
{
	// Method call to where you can ready all your one-time hardware related settings.
	initialise_hardware();
	
	// Initialises Microwave State to Quick Cook Mode, 5 seconds remaining, 10% Power, not running nor paused.
	mode = MODE_QUICK;
  ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mode>
	time_remaining = 7;
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_remaining>
	power_level = POWER_10;
  c4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <power_level>
	is_running = false;
  c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <is_running>
	is_paused = false;
  cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <is_paused>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x16>

000000d2 <uart_put_char>:
	return (bytes_in_input_buffer != 0);
}

void clear_serial_input_buffer(void) {
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	19 f4       	brne	.+6      	; 0xe0 <uart_put_char+0xe>
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	0e 94 69 00 	call	0xd2	; 0xd2 <uart_put_char>
  e0:	9f b7       	in	r25, 0x3f	; 63
  e2:	90 78       	andi	r25, 0x80	; 128
  e4:	02 c0       	rjmp	.+4      	; 0xea <uart_put_char+0x18>
  e6:	99 23       	and	r25, r25
  e8:	29 f1       	breq	.+74     	; 0x134 <uart_put_char+0x62>
  ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
  ee:	8f 3f       	cpi	r24, 0xFF	; 255
  f0:	d1 f3       	breq	.-12     	; 0xe6 <uart_put_char+0x14>
  f2:	f8 94       	cli
  f4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <out_insert_pos>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	8e 0f       	add	r24, r30
  fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <out_insert_pos>
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e8 5f       	subi	r30, 0xF8	; 248
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	c0 83       	st	Z, r28
 108:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bytes_in_out_buffer>
 112:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <out_insert_pos>
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	11 f4       	brne	.+4      	; 0x11e <uart_put_char+0x4c>
 11a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <out_insert_pos>
 11e:	e1 ec       	ldi	r30, 0xC1	; 193
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 62       	ori	r24, 0x20	; 32
 126:	80 83       	st	Z, r24
 128:	99 23       	and	r25, r25
 12a:	39 f0       	breq	.+14     	; 0x13a <uart_put_char+0x68>
 12c:	78 94       	sei
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	05 c0       	rjmp	.+10     	; 0x13e <uart_put_char+0x6c>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <uart_put_char+0x6c>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <__vector_21>:
	return c;
}

// Define the interrupt handler for UART Data Register Empty
ISR(USART0_UDRE_vect) 
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	if (bytes_in_out_buffer > 0) {
 156:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 15a:	88 23       	and	r24, r24
 15c:	29 f1       	breq	.+74     	; 0x1a8 <__vector_21+0x66>
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
 15e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <out_insert_pos>
 162:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <bytes_in_out_buffer>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	82 1b       	sub	r24, r18
 16a:	91 09       	sbc	r25, r1
 16c:	5a f4       	brpl	.+22     	; 0x184 <__vector_21+0x42>
			c = out_buffer[out_insert_pos - bytes_in_out_buffer + OUTPUT_BUFFER_SIZE];
 16e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <out_insert_pos>
 172:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	e8 1b       	sub	r30, r24
 17a:	f1 09       	sbc	r31, r1
 17c:	e9 5f       	subi	r30, 0xF9	; 249
 17e:	fd 4f       	sbci	r31, 0xFD	; 253
 180:	90 81       	ld	r25, Z
 182:	0a c0       	rjmp	.+20     	; 0x198 <__vector_21+0x56>
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 184:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <out_insert_pos>
 188:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e8 1b       	sub	r30, r24
 190:	f1 09       	sbc	r31, r1
 192:	e8 5f       	subi	r30, 0xF8	; 248
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	90 81       	ld	r25, Z
		}
		
		bytes_in_out_buffer--;
 198:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bytes_in_out_buffer>
		UDR0 = c;
 1a2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <__vector_21+0x70>
		
	} else {
		UCSR0B &= ~(1 << UDRIE0);
 1a8:	e1 ec       	ldi	r30, 0xC1	; 193
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	80 83       	st	Z, r24
	}
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_20>:

ISR(USART0_RX_vect) 
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	cf 93       	push	r28
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun
	char c;
	c = UDR0;
 1ea:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	88 23       	and	r24, r24
 1f4:	49 f0       	breq	.+18     	; 0x208 <__vector_20+0x42>
 1f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bytes_in_out_buffer>
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	29 f0       	breq	.+10     	; 0x208 <__vector_20+0x42>
		uart_put_char(c, 0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 69 00 	call	0xd2	; 0xd2 <uart_put_char>
	}
	
	
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 208:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <bytes_in_input_buffer>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	20 f0       	brcs	.+8      	; 0x218 <__vector_20+0x52>
		input_overrun = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <input_overrun>
 216:	18 c0       	rjmp	.+48     	; 0x248 <__vector_20+0x82>
	} else {
		if (c == '\r') {
 218:	cd 30       	cpi	r28, 0x0D	; 13
 21a:	09 f4       	brne	.+2      	; 0x21e <__vector_20+0x58>
			c = '\n';
 21c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		input_buffer[input_insert_pos++] = c;
 21e:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <input_insert_pos>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	8e 0f       	add	r24, r30
 226:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <input_insert_pos>
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	e8 5f       	subi	r30, 0xF8	; 248
 22e:	fd 4f       	sbci	r31, 0xFD	; 253
 230:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 232:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <bytes_in_input_buffer>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
 23c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <input_insert_pos>
 240:	80 31       	cpi	r24, 0x10	; 16
 242:	11 f4       	brne	.+4      	; 0x248 <__vector_20+0x82>
			input_insert_pos = 0; // Wrap around buffer pointer if necessary
 244:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <input_insert_pos>
		}
	}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	cf 91       	pop	r28
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
