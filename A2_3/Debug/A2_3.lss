
A2_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  00800100  00800100  000004a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000705  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000392  00000000  00000000  00002cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_3>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_20>
  54:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e3       	ldi	r30, 0x32	; 50
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 31       	cpi	r26, 0x1D	; 29
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  b2:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initialise_hardware>:


void initialise_hardware(void) {
	
	// Test ssd cc pin
	DDRD = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
	
	
	// IO Board LED's
	IO_LED_DDR = 0xFF;
  be:	87 b9       	out	0x07, r24	; 7
	
	// SSD Display. Interrupt every 1ms using TC1
	SSD_DDR = 0xFF;
  c0:	81 b9       	out	0x01, r24	; 1
	
	// WGM = CTC
	TCCR1A = 0;
  c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	// CS11 = 1 sets prescalar to 8
	
	TCCR1B = (1 << CS11) | (1 << WGM12);
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 999; // Match every 1000 ticks (1ms)
  cc:	87 ee       	ldi	r24, 0xE7	; 231
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// Enable interrupt on OCR1A (pg. 142)
	TIMSK1 = (1 << OCIE1A);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	// Clear interrupt flag in Timer Interrupt Flag Register 1 (TIFR1)
	TIFR1 = (1 << OCF1A);
  de:	86 bb       	out	0x16, r24	; 22
	
	
	// Task 1.1 mode selection with switches
	SWITCH_DDR &= ~((1 << S0) | (1 << S1));
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	8c 7f       	andi	r24, 0xFC	; 252
  e4:	84 b9       	out	0x04, r24	; 4
	
	// Task 1.2 power selection with button. Setting up interrupt on rising edge INT2
	
	EICRA = (1 << ISC20) | (1 << ISC21); // rising edge
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1 << INT2);
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	8d bb       	out	0x1d, r24	; 29
	EIFR = (1 << INTF2);
  f0:	8c bb       	out	0x1c, r24	; 28
	
	
	
	
	sei();	
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <select_mode>:
The subroutine queries the state of the switches and updates the global mode variable.
LED displayed are handled by a separate subroutine.
*/
void select_mode(void) {
	
	if (SWITCH_PIN & (1 << S0) && SWITCH_PIN & (1<< S1)) {
  f6:	18 9b       	sbis	0x03, 0	; 3
  f8:	06 c0       	rjmp	.+12     	; 0x106 <select_mode+0x10>
  fa:	19 9b       	sbis	0x03, 1	; 3
  fc:	04 c0       	rjmp	.+8      	; 0x106 <select_mode+0x10>
		
		// S0:1, S1:1 -> defrost
		mode = MODE_DEFROST;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
 104:	08 95       	ret
		
	}
	else if (!(SWITCH_PIN & (1 << S0)) && (SWITCH_PIN & (1 << S1))) {
 106:	18 99       	sbic	0x03, 0	; 3
 108:	06 c0       	rjmp	.+12     	; 0x116 <select_mode+0x20>
 10a:	19 9b       	sbis	0x03, 1	; 3
 10c:	04 c0       	rjmp	.+8      	; 0x116 <select_mode+0x20>
		
		// S0:0, S1:1 -> beverage
		mode = MODE_BEVERAGE;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
 114:	08 95       	ret
	}
	else if ((SWITCH_PIN & (1 << S0)) && !(SWITCH_PIN & (1 << S1))) {
 116:	18 9b       	sbis	0x03, 0	; 3
 118:	06 c0       	rjmp	.+12     	; 0x126 <select_mode+0x30>
 11a:	19 99       	sbic	0x03, 1	; 3
 11c:	04 c0       	rjmp	.+8      	; 0x126 <select_mode+0x30>
		
		// S0:1, S1:0 -> popcorn
		mode = MODE_POPCORN;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
 124:	08 95       	ret
		
		} else {
			
		// S0:0, S1: 0 -> quick
		mode = MODE_QUICK;
 126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mode>
 12a:	08 95       	ret

0000012c <__vector_3>:
	
}


/* Task 1.2. ISR for when IO:B2 (AVR: B2/INT2). ISR updates state of power global*/
ISR(INT2_vect) {
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
	
	
	if (power_level == POWER_10) {power_level = POWER_50; return;}
 138:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 13c:	81 11       	cpse	r24, r1
 13e:	04 c0       	rjmp	.+8      	; 0x148 <__vector_3+0x1c>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <power_level>
 146:	0e c0       	rjmp	.+28     	; 0x164 <__vector_3+0x38>
	if (power_level == POWER_50) {power_level = POWER_100; return;}
 148:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	21 f4       	brne	.+8      	; 0x158 <__vector_3+0x2c>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <power_level>
 156:	06 c0       	rjmp	.+12     	; 0x164 <__vector_3+0x38>
	if (power_level == POWER_100) {power_level = POWER_10; return;}
 158:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	11 f4       	brne	.+4      	; 0x164 <__vector_3+0x38>
 160:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <power_level>
	
}
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <display_io_led>:

*/
void display_io_led(void) {
	
	// Displaying LED's for mode
	if (mode == MODE_DEFROST) {IO_LED_PORT = (1 << 3);}
 170:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	11 f4       	brne	.+4      	; 0x17c <display_io_led+0xc>
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	88 b9       	out	0x08, r24	; 8
	if (mode == MODE_BEVERAGE) {IO_LED_PORT = (1 << 2);}
 17c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	11 f4       	brne	.+4      	; 0x188 <display_io_led+0x18>
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	88 b9       	out	0x08, r24	; 8
	if (mode == MODE_POPCORN) {IO_LED_PORT = (1 << 1);}
 188:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	11 f4       	brne	.+4      	; 0x194 <display_io_led+0x24>
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	88 b9       	out	0x08, r24	; 8
	if (mode == MODE_QUICK) {IO_LED_PORT = (1 << 0);}
 194:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
 198:	81 11       	cpse	r24, r1
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <display_io_led+0x30>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	88 b9       	out	0x08, r24	; 8
	
	// Displaying LED's for power
	if (power_level == POWER_10) {IO_LED_PORT |= (1 << 5);}
 1a0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 1a4:	81 11       	cpse	r24, r1
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <display_io_led+0x3e>
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	88 b9       	out	0x08, r24	; 8
	if (power_level == POWER_50) {IO_LED_PORT |= (1 << 5) | (1 << 6);}
 1ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <display_io_led+0x4c>
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	80 66       	ori	r24, 0x60	; 96
 1ba:	88 b9       	out	0x08, r24	; 8
	if (power_level == POWER_100) {IO_LED_PORT |= (1 << 5) | (1 << 6) | (1 << 7);}
 1bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <power_level>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	19 f4       	brne	.+6      	; 0x1ca <display_io_led+0x5a>
 1c4:	88 b1       	in	r24, 0x08	; 8
 1c6:	80 6e       	ori	r24, 0xE0	; 224
 1c8:	88 b9       	out	0x08, r24	; 8
 1ca:	08 95       	ret

000001cc <display_ssd>:
 */
void display_ssd() {
	
	// ssd_state.DIGIT ^= 1; // toggle Digit to switch which digit is being displayed
	
	if (ssd_state.DIGIT == 0) {
 1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ssd_state>
 1d0:	81 11       	cpse	r24, r1
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <display_ssd+0x18>
		SSD_PORT = ssd_state.DIGIT0;
 1d4:	e5 e0       	ldi	r30, 0x05	; 5
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	81 81       	ldd	r24, Z+1	; 0x01
 1da:	82 b9       	out	0x02, r24	; 2
		PORTD = 0;
 1dc:	1b b8       	out	0x0b, r1	; 11
		ssd_state.DIGIT = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
		return;
 1e2:	08 95       	ret

	}
	if (ssd_state.DIGIT == 1) {
 1e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ssd_state>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <display_ssd+0x2e>
		SSD_PORT = ssd_state.DIGIT1;
 1ec:	e5 e0       	ldi	r30, 0x05	; 5
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	82 b9       	out	0x02, r24	; 2
		PORTD = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	8b b9       	out	0x0b, r24	; 11
		ssd_state.DIGIT = 0;
 1f8:	10 82       	st	Z, r1
 1fa:	08 95       	ret

000001fc <__vector_13>:
	}
	
}

/* ISR for SSD on OCR1A */
ISR(TIMER1_COMPA_vect) {
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	display_ssd();
 21e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <display_ssd>
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <run_microwave>:



void run_microwave() {
	
	if (!is_running && !is_paused) {
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <is_running>
 248:	81 11       	cpse	r24, r1
 24a:	08 c0       	rjmp	.+16     	; 0x25c <run_microwave+0x18>
 24c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <is_paused>
 250:	81 11       	cpse	r24, r1
 252:	04 c0       	rjmp	.+8      	; 0x25c <run_microwave+0x18>
		// IDLE STATE - microwave ready for mode selection and configuration.
		
		select_mode();
 254:	0e 94 7b 00 	call	0xf6	; 0xf6 <select_mode>
		display_io_led();
 258:	0e 94 b8 00 	call	0x170	; 0x170 <display_io_led>
 25c:	08 95       	ret

0000025e <main>:


int main(void)
{
	
	initialise_hardware();
 25e:	0e 94 5d 00 	call	0xba	; 0xba <initialise_hardware>
	
	// Initialises Microwave State to Quick Cook Mode, 5 seconds remaining, 10% Power, not running nor paused.
	mode = MODE_QUICK;
 262:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mode>
	time_remaining = 7;
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_remaining>
	power_level = POWER_10;
 26c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <power_level>
	is_running = false;
 270:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <is_running>
	is_paused = false;
 274:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <is_paused>
	ssd_state = (SSD_STATE) {0, SSD_ONE, SSD_ONE};
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	a0 e0       	ldi	r26, 0x00	; 0
 27e:	96 e0       	ldi	r25, 0x06	; 6
 280:	a6 e0       	ldi	r26, 0x06	; 6
 282:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ssd_state>
 286:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <ssd_state+0x1>
 28a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <ssd_state+0x2>
	
	
	
	
	while (true) {
		run_microwave();
 28e:	0e 94 22 01 	call	0x244	; 0x244 <run_microwave>
 292:	fd cf       	rjmp	.-6      	; 0x28e <main+0x30>

00000294 <uart_put_char>:
	return (bytes_in_input_buffer != 0);
}

void clear_serial_input_buffer(void) {
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
 294:	cf 93       	push	r28
 296:	c8 2f       	mov	r28, r24
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	19 f4       	brne	.+6      	; 0x2a2 <uart_put_char+0xe>
 29c:	8d e0       	ldi	r24, 0x0D	; 13
 29e:	0e 94 4a 01 	call	0x294	; 0x294 <uart_put_char>
 2a2:	9f b7       	in	r25, 0x3f	; 63
 2a4:	90 78       	andi	r25, 0x80	; 128
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <uart_put_char+0x18>
 2a8:	99 23       	and	r25, r25
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <uart_put_char+0x62>
 2ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 2b0:	8f 3f       	cpi	r24, 0xFF	; 255
 2b2:	d1 f3       	breq	.-12     	; 0x2a8 <uart_put_char+0x14>
 2b4:	f8 94       	cli
 2b6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <out_insert_pos>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	8e 0f       	add	r24, r30
 2be:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <out_insert_pos>
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e5 5f       	subi	r30, 0xF5	; 245
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	c0 83       	st	Z, r28
 2ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bytes_in_out_buffer>
 2d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <out_insert_pos>
 2d8:	8f 3f       	cpi	r24, 0xFF	; 255
 2da:	11 f4       	brne	.+4      	; 0x2e0 <uart_put_char+0x4c>
 2dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <out_insert_pos>
 2e0:	e1 ec       	ldi	r30, 0xC1	; 193
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	80 83       	st	Z, r24
 2ea:	99 23       	and	r25, r25
 2ec:	39 f0       	breq	.+14     	; 0x2fc <uart_put_char+0x68>
 2ee:	78 94       	sei
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <uart_put_char+0x6c>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <uart_put_char+0x6c>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <__vector_21>:
	return c;
}

// Define the interrupt handler for UART Data Register Empty
ISR(USART0_UDRE_vect) 
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	if (bytes_in_out_buffer > 0) {
 318:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 31c:	88 23       	and	r24, r24
 31e:	29 f1       	breq	.+74     	; 0x36a <__vector_21+0x66>
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
 320:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <out_insert_pos>
 324:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <bytes_in_out_buffer>
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	82 1b       	sub	r24, r18
 32c:	91 09       	sbc	r25, r1
 32e:	5a f4       	brpl	.+22     	; 0x346 <__vector_21+0x42>
			c = out_buffer[out_insert_pos - bytes_in_out_buffer + OUTPUT_BUFFER_SIZE];
 330:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <out_insert_pos>
 334:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e8 1b       	sub	r30, r24
 33c:	f1 09       	sbc	r31, r1
 33e:	e6 5f       	subi	r30, 0xF6	; 246
 340:	fd 4f       	sbci	r31, 0xFD	; 253
 342:	90 81       	ld	r25, Z
 344:	0a c0       	rjmp	.+20     	; 0x35a <__vector_21+0x56>
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 346:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <out_insert_pos>
 34a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e8 1b       	sub	r30, r24
 352:	f1 09       	sbc	r31, r1
 354:	e5 5f       	subi	r30, 0xF5	; 245
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	90 81       	ld	r25, Z
		}
		
		bytes_in_out_buffer--;
 35a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 35e:	81 50       	subi	r24, 0x01	; 1
 360:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bytes_in_out_buffer>
		UDR0 = c;
 364:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 368:	05 c0       	rjmp	.+10     	; 0x374 <__vector_21+0x70>
		
	} else {
		UCSR0B &= ~(1 << UDRIE0);
 36a:	e1 ec       	ldi	r30, 0xC1	; 193
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	80 83       	st	Z, r24
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_20>:

ISR(USART0_RX_vect) 
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	cf 93       	push	r28
 3a8:	ef 93       	push	r30
 3aa:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun
	char c;
	c = UDR0;
 3ac:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b4:	88 23       	and	r24, r24
 3b6:	49 f0       	breq	.+18     	; 0x3ca <__vector_20+0x42>
 3b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bytes_in_out_buffer>
 3bc:	8f 3f       	cpi	r24, 0xFF	; 255
 3be:	29 f0       	breq	.+10     	; 0x3ca <__vector_20+0x42>
		uart_put_char(c, 0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8c 2f       	mov	r24, r28
 3c6:	0e 94 4a 01 	call	0x294	; 0x294 <uart_put_char>
	}
	
	
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 3ca:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <bytes_in_input_buffer>
 3ce:	80 31       	cpi	r24, 0x10	; 16
 3d0:	20 f0       	brcs	.+8      	; 0x3da <__vector_20+0x52>
		input_overrun = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <input_overrun>
 3d8:	18 c0       	rjmp	.+48     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	} else {
		if (c == '\r') {
 3da:	cd 30       	cpi	r28, 0x0D	; 13
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <__vector_20+0x58>
			c = '\n';
 3de:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		input_buffer[input_insert_pos++] = c;
 3e0:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <input_insert_pos>
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8e 0f       	add	r24, r30
 3e8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <input_insert_pos>
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	e5 5f       	subi	r30, 0xF5	; 245
 3f0:	fd 4f       	sbci	r31, 0xFD	; 253
 3f2:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 3f4:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <bytes_in_input_buffer>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
 3fe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <input_insert_pos>
 402:	80 31       	cpi	r24, 0x10	; 16
 404:	11 f4       	brne	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			input_insert_pos = 0; // Wrap around buffer pointer if necessary
 406:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <input_insert_pos>
		}
	}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	cf 91       	pop	r28
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
